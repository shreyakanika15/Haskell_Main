
==================== FINAL INTERFACE ====================
2017-04-05 15:43:08.522486 UTC

interface main@main:MapReduce 7103
  interface hash: 3b010bd93fd86706fe19959ec0e79c57
  ABI hash: 5556cd11811b0234831661716bdb600a
  export-list hash: ec8d6e4dededa0919450aaa3f9425d9f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e516c57ebf2ad5186339e705bdb4307a
  sig of: Nothing
  used TH splices: False
  where
exports:
  MapReduce.groupByKey
  MapReduce.localMapReduce
  MapReduce.reducePerKey
  Data.Map.Base.Map
  MapReduce.MapReduce{MapReduce.MapReduce MapReduce.mrMap MapReduce.mrReduce}
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Control.Arrow ab7f126fed349de468f94ac777dc8f4e
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:Data.Typeable c3fcb0780ec05399195ad3277b18d294
import  -/  base-4.8.2.0:Data.Typeable.Internal 76b09e88499fa4ff7869a34e89976afb
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map 1800ccac43fd924c376b60eac12f4d04
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base 642e37808d03e24efbe8e8ff1336f343
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
addDependentFile "/home/kanika/.stack/programs/x86_64-linux/ghc-7.10.3/lib/ghc-7.10.3/include/ghcversion.h"
addDependentFile ".stack-work/dist/x86_64-linux/Cabal-1.22.5.0/build/autogen/cabal_macros.h"
addDependentFile "/usr/include/stdc-predef.h"
4c3fbf994626b48a538779768ef7c8d9
  data MapReduce k1 v1 k2 v2 v3
    = MapReduce {mrMap :: k1 -> v1 -> [(k2, v2)],
                 mrReduce :: k2 -> [v2] -> v3}
    Promotable
b1897444d5414a112a18dde1856df86e
  groupByKey ::
    GHC.Classes.Ord k2 => [(k2, v2)] -> Data.Map.Base.Map k2 [v2]
  {- Arity: 2, Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><S,1*U>,
     Unfolding: (\ @ k2
                   @ v2
                   $dOrd :: GHC.Classes.Ord k2
                   eta :: [(k2, v2)] ->
                 Data.Map.Base.fromListWithKey
                   @ k2
                   @ [v2]
                   $dOrd
                   (MapReduce.groupByKey2 @ k2 @ v2)
                   (GHC.Base.map
                      @ (k2, v2)
                      @ (k2, [v2])
                      (MapReduce.groupByKey1 @ k2 @ v2)
                      eta)) -}
bf8f7f4346b7f8dc1968cc81bf7d4a1e
  groupByKey1 :: (k2, v2) -> (k2, [v2])
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ k2 @ v2 ds :: (k2, v2) ->
                 (case ds of wild { (,) x y -> x },
                  GHC.Types.:
                    @ v2
                    (case ds of wild { (,) x y -> y })
                    (GHC.Types.[] @ v2))) -}
6058d916b6ccd339f3e497140f483f4c
  groupByKey2 :: k2 -> [v2] -> [v2] -> [v2]
  {- Arity: 3, HasNoCafRefs,
     Unfolding: (\ @ k2
                   @ v2
                   ds :: k2
                   x :: [v2][OneShot]
                   y :: [v2][OneShot] ->
                 GHC.Base.++ @ v2 x y) -}
76397c18caaabafe69977fea83bdb3a4
  localMapReduce ::
    GHC.Classes.Ord k2 =>
    MapReduce.MapReduce k1 v1 k2 v2 v3
    -> Data.Map.Base.Map k1 v1 -> Data.Map.Base.Map k2 v3
  {- Arity: 3,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U(C(C1(U)),1*C(C1(U)))><S,1*U>,
     Unfolding: (\ @ k1
                   @ k2
                   @ v1
                   @ v2
                   @ v3
                   $dOrd :: GHC.Classes.Ord k2
                   mr :: MapReduce.MapReduce k1 v1 k2 v2 v3
                   eta :: Data.Map.Base.Map k1 v1 ->
                 letrec {
                   go10 :: [(k2, v2)] -> Data.Map.Base.Map k1 v1 -> [(k2, v2)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ z' :: [(k2, v2)] ds :: Data.Map.Base.Map k1 v1 ->
                     case ds of wild {
                       Data.Map.Base.Bin dt kx x l r
                       -> go10
                            (case mr of wild1 { MapReduce.MapReduce ds1 ds2 ->
                             GHC.Base.++ @ (k2, v2) (ds1 kx x) (go10 z' r) })
                            l
                       Data.Map.Base.Tip -> z' }
                 } in
                 Data.Map.Base.mapWithKey
                   @ k2
                   @ [v2]
                   @ v3
                   (case mr of wild { MapReduce.MapReduce ds ds1 -> ds1 })
                   (Data.Map.Base.fromListWithKey
                      @ k2
                      @ [v2]
                      $dOrd
                      (MapReduce.groupByKey2 @ k2 @ v2)
                      (GHC.Base.map
                         @ (k2, v2)
                         @ (k2, [v2])
                         (MapReduce.groupByKey1 @ k2 @ v2)
                         (go10 (GHC.Types.[] @ (k2, v2)) eta)))) -}
c60c5dcc00b2960e3096b707e6201e85
  mrMap ::
    MapReduce.MapReduce k1 v1 k2 v2 v3 -> k1 -> v1 -> [(k2, v2)]
  RecSel MapReduce.MapReduce
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ k1
                   @ v1
                   @ k2
                   @ v2
                   @ v3
                   ds :: MapReduce.MapReduce k1 v1 k2 v2 v3 ->
                 case ds of wild { MapReduce.MapReduce ds1 ds2 -> ds1 }) -}
7699baee0c104a55b9695f04e0678112
  mrReduce :: MapReduce.MapReduce k1 v1 k2 v2 v3 -> k2 -> [v2] -> v3
  RecSel MapReduce.MapReduce
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ k1
                   @ v1
                   @ k2
                   @ v2
                   @ v3
                   ds :: MapReduce.MapReduce k1 v1 k2 v2 v3 ->
                 case ds of wild { MapReduce.MapReduce ds1 ds2 -> ds2 }) -}
b22e38020c6079f1c4e16d68fe506e16
  reducePerKey ::
    MapReduce.MapReduce k1 v1 k2 v2 v3
    -> Data.Map.Base.Map k2 [v2] -> Data.Map.Base.Map k2 v3
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C(C1(U)))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ k1
                   @ v1
                   @ k2
                   @ v2
                   @ v3
                   mr :: MapReduce.MapReduce k1 v1 k2 v2 v3
                   eta :: Data.Map.Base.Map k2 [v2] ->
                 Data.Map.Base.mapWithKey
                   @ k2
                   @ [v2]
                   @ v3
                   (case mr of wild { MapReduce.MapReduce ds ds1 -> ds1 })
                   eta) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

